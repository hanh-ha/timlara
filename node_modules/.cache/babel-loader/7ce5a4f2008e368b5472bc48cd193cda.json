{"ast":null,"code":"import { AllTypeActions } from '../types';\nimport { GlobalReducer, initialRequestState } from './state';\nexport const GetUsersReducser = (state = {\n  data: [],\n  loading: false,\n  error: ''\n}, action) => {\n  switch (action.type) {\n    case AllTypeActions.LOAD_USERS_LOADING:\n      {\n        return { ...state,\n          loading: true,\n          error: ''\n        };\n      }\n\n    case AllTypeActions.LOAD_USERS_SUCCESS:\n      {\n        return { ...state,\n          data: action.data,\n          loading: false\n        };\n      }\n\n    case AllTypeActions.LOAD_USERS_ERROR:\n      {\n        return { ...state,\n          loading: false,\n          error: action.error\n        };\n      }\n\n    case 'ADD_USER_SUCCESS':\n      {\n        console.log('add user success reducer', action);\n        return { ...state,\n          data: [...state.data, action.data]\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n_c = GetUsersReducser;\nexport const AddUserReducer = (state = initialRequestState, action) => {\n  return GlobalReducer(state, action, AllTypeActions.ADD_USER.toString());\n};\n_c2 = AddUserReducer;\nexport const CheckboxUserReducer = (state = {\n  checked: false,\n  allChecked: false\n}, action) => {\n  switch (action.type) {\n    case AllTypeActions.CHECKBOX_USER:\n      {\n        return { ...state,\n          checked: action.checked\n        };\n      }\n\n    case AllTypeActions.CHECKBOX_ALL_USER:\n      {\n        return { ...state,\n          allChecked: action.allChecked\n        };\n      }\n  }\n};\n_c3 = CheckboxUserReducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GetUsersReducser\");\n$RefreshReg$(_c2, \"AddUserReducer\");\n$RefreshReg$(_c3, \"CheckboxUserReducer\");","map":{"version":3,"sources":["/var/www/timlara-admin-reactjs/src/store/reducers/user.ts"],"names":["AllTypeActions","GlobalReducer","initialRequestState","GetUsersReducser","state","data","loading","error","action","type","LOAD_USERS_LOADING","LOAD_USERS_SUCCESS","LOAD_USERS_ERROR","console","log","AddUserReducer","ADD_USER","toString","CheckboxUserReducer","checked","allChecked","CHECKBOX_USER","CHECKBOX_ALL_USER"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,SAASC,aAAT,EAA0CC,mBAA1C,QAAqE,SAArE;AAKA,OAAO,MAAMC,gBAAyB,GAAG,CAACC,KAAqD,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,OAAO,EAAE,KAArB;AAA4BC,EAAAA,KAAK,EAAE;AAAnC,CAAzD,EAAkGC,MAAlG,KAAwH;AAChK,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKT,cAAc,CAACU,kBAApB;AAAwC;AACvC,eAAO,EACN,GAAGN,KADG;AAENE,UAAAA,OAAO,EAAE,IAFH;AAGNC,UAAAA,KAAK,EAAE;AAHD,SAAP;AAKA;;AACD,SAAKP,cAAc,CAACW,kBAApB;AAAwC;AACvC,eAAO,EACN,GAAGP,KADG;AAENC,UAAAA,IAAI,EAAEG,MAAM,CAACH,IAFP;AAGNC,UAAAA,OAAO,EAAE;AAHH,SAAP;AAKA;;AACD,SAAKN,cAAc,CAACY,gBAApB;AAAsC;AACrC,eAAO,EACN,GAAGR,KADG;AAENE,UAAAA,OAAO,EAAE,KAFH;AAGNC,UAAAA,KAAK,EAAEC,MAAM,CAACD;AAHR,SAAP;AAKA;;AACD,SAAK,kBAAL;AAAyB;AACxBM,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCN,MAAxC;AACA,eAAO,EAAE,GAAGJ,KAAL;AAAYC,UAAAA,IAAI,EAAE,CAAC,GAAGD,KAAK,CAACC,IAAV,EAAgBG,MAAM,CAACH,IAAvB;AAAlB,SAAP;AACA;;AACD;AAAS;AACR,eAAOD,KAAP;AACA;AA5BF;AA8BA,CA/BM;KAAMD,gB;AAiCb,OAAO,MAAMY,cAAuB,GAAG,CAACX,KAAuB,GAAGF,mBAA3B,EAAgDM,MAAhD,KAAsE;AAC5G,SAAOP,aAAa,CAACG,KAAD,EAAQI,MAAR,EAAgBR,cAAc,CAACgB,QAAf,CAAwBC,QAAxB,EAAhB,CAApB;AACA,CAFM;MAAMF,c;AAIb,OAAO,MAAMG,mBAA4B,GAAG,CAACd,KAAgD,GAAG;AAAEe,EAAAA,OAAO,EAAE,KAAX;AAAkBC,EAAAA,UAAU,EAAE;AAA9B,CAApD,EAA2FZ,MAA3F,KAAiH;AAC5J,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKT,cAAc,CAACqB,aAApB;AAAmC;AAClC,eAAO,EACN,GAAGjB,KADG;AAENe,UAAAA,OAAO,EAAEX,MAAM,CAACW;AAFV,SAAP;AAIA;;AACD,SAAKnB,cAAc,CAACsB,iBAApB;AAAuC;AACtC,eAAO,EACN,GAAGlB,KADG;AAENgB,UAAAA,UAAU,EAAEZ,MAAM,CAACY;AAFb,SAAP;AAIA;AAZF;AAcA,CAfM;MAAMF,mB","sourcesContent":["import { AllTypeActions } from '../types';\nimport { AnyAction, Reducer } from 'redux';\nimport { GlobalReducer, IAppRequestState, initialRequestState } from './state';\nimport { actionChannel } from '@redux-saga/core/effects';\n\nexport interface IApplicationModal {}\n\nexport const GetUsersReducser: Reducer = (state: { data: any; loading: boolean; error: string } = { data: [], loading: false, error: '' }, action: AnyAction) => {\n\tswitch (action.type) {\n\t\tcase AllTypeActions.LOAD_USERS_LOADING: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t\terror: '',\n\t\t\t};\n\t\t}\n\t\tcase AllTypeActions.LOAD_USERS_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdata: action.data,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\t}\n\t\tcase AllTypeActions.LOAD_USERS_ERROR: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terror: action.error,\n\t\t\t};\n\t\t}\n\t\tcase 'ADD_USER_SUCCESS': {\n\t\t\tconsole.log('add user success reducer', action);\n\t\t\treturn { ...state, data: [...state.data, action.data] };\n\t\t}\n\t\tdefault: {\n\t\t\treturn state;\n\t\t}\n\t}\n};\n\nexport const AddUserReducer: Reducer = (state: IAppRequestState = initialRequestState, action: AnyAction) => {\n\treturn GlobalReducer(state, action, AllTypeActions.ADD_USER.toString());\n};\n\nexport const CheckboxUserReducer: Reducer = (state: { checked: boolean; allChecked: boolean } = { checked: false, allChecked: false }, action: AnyAction) => {\n\tswitch (action.type) {\n\t\tcase AllTypeActions.CHECKBOX_USER: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tchecked: action.checked,\n\t\t\t};\n\t\t}\n\t\tcase AllTypeActions.CHECKBOX_ALL_USER: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tallChecked: action.allChecked,\n\t\t\t};\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}
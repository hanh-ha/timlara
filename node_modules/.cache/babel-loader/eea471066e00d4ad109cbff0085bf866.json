{"ast":null,"code":"import { AllTypeActions } from '../types';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { Requests } from '../requests';\n\nfunction* getFilterProduct() {\n  try {\n    const apiUrl = 'https://60517468534609001767198c.mockapi.io/api/filterProduct';\n    const data = yield Requests.get(apiUrl);\n    yield put({\n      type: AllTypeActions.LOAD_USERS_SUCCESS,\n      data\n    });\n  } catch (e) {\n    yield put({\n      type: AllTypeActions.LOAD_USERS_ERROR,\n      error: e.message\n    });\n  }\n}\n\nexport function* storeActions() {\n  yield takeLatest(AllTypeActions.FILTER_PRODUCT, getFilterProduct);\n}","map":{"version":3,"sources":["/var/www/timlara-admin-reactjs/src/store/sagas/store.ts"],"names":["AllTypeActions","put","takeLatest","Requests","getFilterProduct","apiUrl","data","get","type","LOAD_USERS_SUCCESS","e","LOAD_USERS_ERROR","error","message","storeActions","FILTER_PRODUCT"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,UAAUC,gBAAV,GAA6B;AAC5B,MAAI;AACH,UAAMC,MAAM,GAAG,+DAAf;AACA,UAAMC,IAAS,GAAG,MAAMH,QAAQ,CAACI,GAAT,CAAaF,MAAb,CAAxB;AACA,UAAMJ,GAAG,CAAC;AAAEO,MAAAA,IAAI,EAAER,cAAc,CAACS,kBAAvB;AAA2CH,MAAAA;AAA3C,KAAD,CAAT;AACA,GAJD,CAIE,OAAOI,CAAP,EAAU;AACX,UAAMT,GAAG,CAAC;AAAEO,MAAAA,IAAI,EAAER,cAAc,CAACW,gBAAvB;AAAyCC,MAAAA,KAAK,EAAEF,CAAC,CAACG;AAAlD,KAAD,CAAT;AACA;AACD;;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC/B,QAAMZ,UAAU,CAACF,cAAc,CAACe,cAAhB,EAAgCX,gBAAhC,CAAhB;AACA","sourcesContent":["import { AllTypeActions } from '../types';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { Requests } from '../requests';\n\nfunction* getFilterProduct() {\n\ttry {\n\t\tconst apiUrl = 'https://60517468534609001767198c.mockapi.io/api/filterProduct';\n\t\tconst data: any = yield Requests.get(apiUrl);\n\t\tyield put({ type: AllTypeActions.LOAD_USERS_SUCCESS, data });\n\t} catch (e) {\n\t\tyield put({ type: AllTypeActions.LOAD_USERS_ERROR, error: e.message });\n\t}\n}\n\nexport function* storeActions() {\n\tyield takeLatest(AllTypeActions.FILTER_PRODUCT, getFilterProduct);\n}\n"]},"metadata":{},"sourceType":"module"}
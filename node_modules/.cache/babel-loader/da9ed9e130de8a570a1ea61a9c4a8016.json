{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { AllSagaActions } from './sagas';\nimport { ApplicationState } from './reducers';\nimport { usersSaga } from './sagas/admin';\nconst initialAppState = {};\nexport const getStore = (initialState = initialAppState) => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const appStore = createStore(ApplicationState, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n  sagaMiddleware.run(AllSagaActions);\n  return appStore;\n};\nconst sagaMiddleware = createSagaMiddleware();\nexport function configureStore(initialState) {\n  const middleware = [sagaMiddleware];\n  const composeEnhancers = composeWithDevTools({});\n  const store = createStore(ApplicationState, initialState, composeEnhancers(applyMiddleware(...middleware)));\n  sagaMiddleware.run(usersSaga);\n  return store;\n}\nexport * from './endpoints';\nexport * from './actions';\nexport * from './reducers';\nexport * from './sagas';\nexport * from './types';\nexport * from './requests';","map":{"version":3,"sources":["/var/www/timlara-admin-reactjs/src/store/index.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","composeWithDevTools","AllSagaActions","ApplicationState","usersSaga","initialAppState","getStore","initialState","composeEnhancers","sagaMiddleware","appStore","run","configureStore","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,SAAT,QAA0B,eAA1B;AAGA,MAAMC,eAAoB,GAAG,EAA7B;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,YAAY,GAAGF,eAAhB,KAAoC;AAC3D,QAAMG,gBAAgB,GAAGP,mBAAmB,CAAC,EAAD,CAA5C;AACA,QAAMQ,cAAc,GAAGT,oBAAoB,EAA3C;AACA,QAAMU,QAAQ,GAAGZ,WAAW,CAACK,gBAAD,EAAmBI,YAAnB,EAAiCC,gBAAgB,CAACT,eAAe,CAACU,cAAD,CAAhB,CAAjD,CAA5B;AACAA,EAAAA,cAAc,CAACE,GAAf,CAAmBT,cAAnB;AACA,SAAOQ,QAAP;AACA,CANM;AAQP,MAAMD,cAAc,GAAGT,oBAAoB,EAA3C;AAEA,OAAO,SAASY,cAAT,CAAwBL,YAAxB,EAAsC;AAC5C,QAAMM,UAAU,GAAG,CAACJ,cAAD,CAAnB;AAEA,QAAMD,gBAAgB,GAAGP,mBAAmB,CAAC,EAAD,CAA5C;AACA,QAAMa,KAAK,GAAGhB,WAAW,CAACK,gBAAD,EAAmBI,YAAnB,EAAiCC,gBAAgB,CAACT,eAAe,CAAC,GAAGc,UAAJ,CAAhB,CAAjD,CAAzB;AAEAJ,EAAAA,cAAc,CAACE,GAAf,CAAmBP,SAAnB;AAEA,SAAOU,KAAP;AACA;AAED,cAAc,aAAd;AACA,cAAc,WAAd;AACA,cAAc,YAAd;AACA,cAAc,SAAd;AACA,cAAc,SAAd;AACA,cAAc,YAAd","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { AllSagaActions } from './sagas';\nimport { ApplicationState } from './reducers';\nimport { usersSaga } from './sagas/admin';\nimport { rootReducer } from './reducers/index';\n\nconst initialAppState: any = {};\nexport const getStore = (initialState = initialAppState) => {\n\tconst composeEnhancers = composeWithDevTools({});\n\tconst sagaMiddleware = createSagaMiddleware();\n\tconst appStore = createStore(ApplicationState, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\tsagaMiddleware.run(AllSagaActions);\n\treturn appStore;\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport function configureStore(initialState) {\n\tconst middleware = [sagaMiddleware];\n\n\tconst composeEnhancers = composeWithDevTools({});\n\tconst store = createStore(ApplicationState, initialState, composeEnhancers(applyMiddleware(...middleware)));\n\n\tsagaMiddleware.run(usersSaga);\n\n\treturn store;\n}\n\nexport * from './endpoints';\nexport * from './actions';\nexport * from './reducers';\nexport * from './sagas';\nexport * from './types';\nexport * from './requests';\n"]},"metadata":{},"sourceType":"module"}
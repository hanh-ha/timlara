{"ast":null,"code":"var _jsxFileName = \"/var/www/timlara-admin-reactjs/src/components/InputText/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStylesOutline = makeStyles(theme => ({\n  root: {\n    '&:hover .MuiOutlinedInput-notchedOutline': {\n      borderColor: '#FFF'\n    }\n  },\n  notchedOutline: {\n    borderColor: '#FFF'\n  }\n}));\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '&:hover .MuiOutlinedInput-notchedOutline': {\n      borderColor: '#FFF'\n    },\n    '& input:valid + fieldset': {\n      borderColor: '#FFF'\n    },\n    '& input:valid': {\n      color: '#FFF'\n    }\n  }\n}));\nconst inputLabelStyle = makeStyles(theme => ({\n  root: {\n    color: '#FFF'\n  }\n}));\nconst useLabelStyle = makeStyles(theme => ({\n  labelColor: {\n    color: '#FFF'\n  }\n}));\nexport function InputText(props) {\n  _s();\n\n  const [showPasswd, setShowPasswd] = useState(false);\n  const {\n    type = 'text',\n    label = '',\n    error = false,\n    autocomplete = false,\n    onBlur = () => {},\n    onChange = () => {},\n    value = '',\n    isWhite = false\n  } = props;\n  const classes = useStyles();\n  const classesOutline = useStylesOutline();\n  const labelClasses = useLabelStyle();\n  const inputLabelClasses = inputLabelStyle();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"field-container\",\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      variant: \"outlined\",\n      children: [type === 'password' && /*#__PURE__*/_jsxDEV(InputLabel, {\n        className: isWhite ? labelClasses.labelColor : undefined,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }, this), type === 'password' ? /*#__PURE__*/_jsxDEV(OutlinedInput, {\n        type: showPasswd ? 'text' : 'password',\n        label: label,\n        error: error,\n        value: value,\n        onBlur: onBlur,\n        onChange: onChange,\n        classes: isWhite ? classesOutline : undefined,\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"toggle password visibility\",\n            onClick: () => setShowPasswd(!showPasswd),\n            edge: \"end\",\n            children: showPasswd ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 24\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 8\n        }, this),\n        inputProps: autocomplete ? {\n          autoComplete: 'new-password'\n        } : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n        type: type,\n        label: label,\n        error: error,\n        value: value,\n        onBlur: onBlur,\n        onChange: onChange,\n        classes: isWhite ? classes : undefined,\n        variant: \"outlined\",\n        InputLabelProps: type === 'date' ? {\n          shrink: true,\n          classes: isWhite ? inputLabelClasses : undefined\n        } : {\n          classes: isWhite ? inputLabelClasses : undefined\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n}\n\n_s(InputText, \"saep95GsaXmDjaFkQAwkaGu2GRI=\", false, function () {\n  return [useStyles, useStylesOutline, useLabelStyle];\n});\n\n_c = InputText;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputText\");","map":{"version":3,"sources":["/var/www/timlara-admin-reactjs/src/components/InputText/index.tsx"],"names":["React","useState","TextField","OutlinedInput","InputAdornment","IconButton","Visibility","VisibilityOff","FormControl","InputLabel","makeStyles","useStylesOutline","theme","root","borderColor","notchedOutline","useStyles","color","inputLabelStyle","useLabelStyle","labelColor","InputText","props","showPasswd","setShowPasswd","type","label","error","autocomplete","onBlur","onChange","value","isWhite","classes","classesOutline","labelClasses","inputLabelClasses","undefined","autoComplete","shrink"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAaA,MAAMC,gBAAgB,GAAGD,UAAU,CAAEE,KAAD,KAAY;AAC/CC,EAAAA,IAAI,EAAE;AACL,gDAA4C;AAC3CC,MAAAA,WAAW,EAAE;AAD8B;AADvC,GADyC;AAM/CC,EAAAA,cAAc,EAAE;AACfD,IAAAA,WAAW,EAAE;AADE;AAN+B,CAAZ,CAAD,CAAnC;AAWA,MAAME,SAAS,GAAGN,UAAU,CAAEE,KAAD,KAAY;AACxCC,EAAAA,IAAI,EAAE;AACL,gDAA4C;AAC3CC,MAAAA,WAAW,EAAE;AAD8B,KADvC;AAIL,gCAA4B;AAC3BA,MAAAA,WAAW,EAAE;AADc,KAJvB;AAOL,qBAAiB;AAChBG,MAAAA,KAAK,EAAE;AADS;AAPZ;AADkC,CAAZ,CAAD,CAA5B;AAcA,MAAMC,eAAe,GAAGR,UAAU,CAAEE,KAAD,KAAY;AAC9CC,EAAAA,IAAI,EAAE;AACLI,IAAAA,KAAK,EAAE;AADF;AADwC,CAAZ,CAAD,CAAlC;AAMA,MAAME,aAAa,GAAGT,UAAU,CAAEE,KAAD,KAAY;AAC5CQ,EAAAA,UAAU,EAAE;AACXH,IAAAA,KAAK,EAAE;AADI;AADgC,CAAZ,CAAD,CAAhC;AAMA,OAAO,SAASI,SAAT,CAAmBC,KAAnB,EAAkC;AAAA;;AACxC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAEwB,IAAAA,IAAI,GAAG,MAAT;AAAiBC,IAAAA,KAAK,GAAG,EAAzB;AAA6BC,IAAAA,KAAK,GAAG,KAArC;AAA4CC,IAAAA,YAAY,GAAG,KAA3D;AAAkEC,IAAAA,MAAM,GAAG,MAAM,CAAE,CAAnF;AAAqFC,IAAAA,QAAQ,GAAG,MAAM,CAAE,CAAxG;AAA0GC,IAAAA,KAAK,GAAG,EAAlH;AAAsHC,IAAAA,OAAO,GAAG;AAAhI,MAA0IV,KAAhJ;AACA,QAAMW,OAAO,GAAGjB,SAAS,EAAzB;AACA,QAAMkB,cAAc,GAAGvB,gBAAgB,EAAvC;AACA,QAAMwB,YAAY,GAAGhB,aAAa,EAAlC;AACA,QAAMiB,iBAAiB,GAAGlB,eAAe,EAAzC;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACC,QAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAuB,MAAA,OAAO,EAAC,UAA/B;AAAA,iBACEO,IAAI,KAAK,UAAT,iBAAuB,QAAC,UAAD;AAAY,QAAA,SAAS,EAAEO,OAAO,GAAGG,YAAY,CAACf,UAAhB,GAA6BiB,SAA3D;AAAA,kBAAuEX;AAAvE;AAAA;AAAA;AAAA;AAAA,cADzB,EAEED,IAAI,KAAK,UAAT,gBACA,QAAC,aAAD;AACC,QAAA,IAAI,EAAEF,UAAU,GAAG,MAAH,GAAY,UAD7B;AAEC,QAAA,KAAK,EAAEG,KAFR;AAGC,QAAA,KAAK,EAAEC,KAHR;AAIC,QAAA,KAAK,EAAEI,KAJR;AAKC,QAAA,MAAM,EAAEF,MALT;AAMC,QAAA,QAAQ,EAAEC,QANX;AAOC,QAAA,OAAO,EAAEE,OAAO,GAAGE,cAAH,GAAoBG,SAPrC;AAQC,QAAA,YAAY,eACX,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,KAAzB;AAAA,iCACC,QAAC,UAAD;AAAY,0BAAW,4BAAvB;AAAoD,YAAA,OAAO,EAAE,MAAMb,aAAa,CAAC,CAACD,UAAF,CAAhF;AAA+F,YAAA,IAAI,EAAC,KAApG;AAAA,sBACEA,UAAU,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,oBAAH,gBAAoB,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADhC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBATF;AAeC,QAAA,UAAU,EACTK,YAAY,GACT;AACAU,UAAAA,YAAY,EAAE;AADd,SADS,GAITD;AApBL;AAAA;AAAA;AAAA;AAAA,cADA,gBAyBA,QAAC,SAAD;AACC,QAAA,IAAI,EAAEZ,IADP;AAEC,QAAA,KAAK,EAAEC,KAFR;AAGC,QAAA,KAAK,EAAEC,KAHR;AAIC,QAAA,KAAK,EAAEI,KAJR;AAKC,QAAA,MAAM,EAAEF,MALT;AAMC,QAAA,QAAQ,EAAEC,QANX;AAOC,QAAA,OAAO,EAAEE,OAAO,GAAGC,OAAH,GAAaI,SAP9B;AAQC,QAAA,OAAO,EAAC,UART;AASC,QAAA,eAAe,EACdZ,IAAI,KAAK,MAAT,GACG;AACAc,UAAAA,MAAM,EAAE,IADR;AAEAN,UAAAA,OAAO,EAAED,OAAO,GAAGI,iBAAH,GAAuBC;AAFvC,SADH,GAKG;AACAJ,UAAAA,OAAO,EAAED,OAAO,GAAGI,iBAAH,GAAuBC;AADvC;AAfL;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAqDA;;GA5DehB,S;UAGCL,S,EACOL,gB,EACFQ,a;;;KALNE,S","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface IProps {\n\terror?: boolean;\n\ttype?: string;\n\tlabel?: string;\n\tonBlur?: () => void;\n\tonChange?: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n\tvalue?: string;\n\tisWhite?: boolean;\n\tautocomplete?: boolean;\n}\n\nconst useStylesOutline = makeStyles((theme) => ({\n\troot: {\n\t\t'&:hover .MuiOutlinedInput-notchedOutline': {\n\t\t\tborderColor: '#FFF',\n\t\t},\n\t},\n\tnotchedOutline: {\n\t\tborderColor: '#FFF',\n\t},\n}));\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\t'&:hover .MuiOutlinedInput-notchedOutline': {\n\t\t\tborderColor: '#FFF',\n\t\t},\n\t\t'& input:valid + fieldset': {\n\t\t\tborderColor: '#FFF',\n\t\t},\n\t\t'& input:valid': {\n\t\t\tcolor: '#FFF',\n\t\t},\n\t},\n}));\n\nconst inputLabelStyle = makeStyles((theme) => ({\n\troot: {\n\t\tcolor: '#FFF',\n\t},\n}));\n\nconst useLabelStyle = makeStyles((theme) => ({\n\tlabelColor: {\n\t\tcolor: '#FFF',\n\t},\n}));\n\nexport function InputText(props: IProps) {\n\tconst [showPasswd, setShowPasswd] = useState(false);\n\tconst { type = 'text', label = '', error = false, autocomplete = false, onBlur = () => {}, onChange = () => {}, value = '', isWhite = false } = props;\n\tconst classes = useStyles();\n\tconst classesOutline = useStylesOutline();\n\tconst labelClasses = useLabelStyle();\n\tconst inputLabelClasses = inputLabelStyle();\n\treturn (\n\t\t<div className='field-container'>\n\t\t\t<FormControl fullWidth variant='outlined'>\n\t\t\t\t{type === 'password' && <InputLabel className={isWhite ? labelClasses.labelColor : undefined}>{label}</InputLabel>}\n\t\t\t\t{type === 'password' ? (\n\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\ttype={showPasswd ? 'text' : 'password'}\n\t\t\t\t\t\tlabel={label}\n\t\t\t\t\t\terror={error}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tclasses={isWhite ? classesOutline : undefined}\n\t\t\t\t\t\tendAdornment={\n\t\t\t\t\t\t\t<InputAdornment position='end'>\n\t\t\t\t\t\t\t\t<IconButton aria-label='toggle password visibility' onClick={() => setShowPasswd(!showPasswd)} edge='end'>\n\t\t\t\t\t\t\t\t\t{showPasswd ? <Visibility /> : <VisibilityOff />}\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t</InputAdornment>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinputProps={\n\t\t\t\t\t\t\tautocomplete\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<TextField\n\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\tlabel={label}\n\t\t\t\t\t\terror={error}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tclasses={isWhite ? classes : undefined}\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tInputLabelProps={\n\t\t\t\t\t\t\ttype === 'date'\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t\t\t\t\tclasses: isWhite ? inputLabelClasses : undefined,\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\tclasses: isWhite ? inputLabelClasses : undefined,\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</FormControl>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}
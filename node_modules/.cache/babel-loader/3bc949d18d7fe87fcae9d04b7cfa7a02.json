{"ast":null,"code":"import { AllTypeActions } from '../types';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { Requests } from '../requests';\nimport { getApiUrl } from '../endpoints';\nimport { showMessage } from '../actions';\n\nfunction* getUsers() {\n  try {\n    // const apiUrl = getApiUrl(ENDPOINTS.GET_USERS);\n    const apiUrl = 'https://60517468534609001767198c.mockapi.io/api/user';\n    console.log('apiUrl', apiUrl);\n    const data = yield Requests.get(apiUrl);\n    yield put({\n      type: AllTypeActions.LOAD_USERS_SUCCESS,\n      data\n    });\n    console.log(data);\n  } catch (e) {\n    yield put({\n      type: AllTypeActions.LOAD_USERS_ERROR,\n      error: e.message\n    });\n  }\n}\n\nfunction* addUser({\n  type,\n  input\n}) {\n  yield put({\n    type: `${type}_ATTEMPT`\n  });\n\n  try {\n    const apiUrl = getApiUrl(ENDPOINTS.CREATE_ADMIN_ACCOUNT);\n    const data = yield Requests.post(apiUrl, input);\n\n    if (data && data.success) {\n      yield put({\n        type: `${type}_SUCCESS`,\n        data: data.account\n      });\n      yield put(showMessage('Create addmin account successful!'));\n    } else {\n      yield put({\n        type: `${type}_FAIL`,\n        error: data.message\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: `${type}_FAIL`,\n      error: e.toString()\n    });\n  }\n}\n\nexport function* userActions() {\n  yield takeLatest(AllTypeActions.LOAD_USERS_LOADING, getUsers);\n  yield takeLatest(AllTypeActions.ADD_USER, addUser);\n}","map":{"version":3,"sources":["/var/www/timlara-admin-reactjs/src/store/sagas/user.ts"],"names":["AllTypeActions","put","takeLatest","Requests","getApiUrl","showMessage","getUsers","apiUrl","console","log","data","get","type","LOAD_USERS_SUCCESS","e","LOAD_USERS_ERROR","error","message","addUser","input","ENDPOINTS","CREATE_ADMIN_ACCOUNT","post","success","account","toString","userActions","LOAD_USERS_LOADING","ADD_USER"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEA,UAAUC,QAAV,GAAqB;AACpB,MAAI;AACH;AACA,UAAMC,MAAM,GAAG,sDAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AACA,UAAMG,IAAS,GAAG,MAAMP,QAAQ,CAACQ,GAAT,CAAaJ,MAAb,CAAxB;AACA,UAAMN,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAEZ,cAAc,CAACa,kBAAvB;AAA2CH,MAAAA;AAA3C,KAAD,CAAT;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,GAPD,CAOE,OAAOI,CAAP,EAAU;AACX,UAAMb,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAEZ,cAAc,CAACe,gBAAvB;AAAyCC,MAAAA,KAAK,EAAEF,CAAC,CAACG;AAAlD,KAAD,CAAT;AACA;AACD;;AAED,UAAUC,OAAV,CAAkB;AAAEN,EAAAA,IAAF;AAAQO,EAAAA;AAAR,CAAlB,EAA8C;AAC7C,QAAMlB,GAAG,CAAC;AAAEW,IAAAA,IAAI,EAAG,GAAEA,IAAK;AAAhB,GAAD,CAAT;;AACA,MAAI;AACH,UAAML,MAAM,GAAGH,SAAS,CAACgB,SAAS,CAACC,oBAAX,CAAxB;AACA,UAAMX,IAAS,GAAG,MAAMP,QAAQ,CAACmB,IAAT,CAAcf,MAAd,EAAsBY,KAAtB,CAAxB;;AACA,QAAIT,IAAI,IAAIA,IAAI,CAACa,OAAjB,EAA0B;AACzB,YAAMtB,GAAG,CAAC;AAAEW,QAAAA,IAAI,EAAG,GAAEA,IAAK,UAAhB;AAA2BF,QAAAA,IAAI,EAAEA,IAAI,CAACc;AAAtC,OAAD,CAAT;AACA,YAAMvB,GAAG,CAACI,WAAW,CAAC,mCAAD,CAAZ,CAAT;AACA,KAHD,MAGO;AACN,YAAMJ,GAAG,CAAC;AAAEW,QAAAA,IAAI,EAAG,GAAEA,IAAK,OAAhB;AAAwBI,QAAAA,KAAK,EAAEN,IAAI,CAACO;AAApC,OAAD,CAAT;AACA;AACD,GATD,CASE,OAAOH,CAAP,EAAU;AACX,UAAMb,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAG,GAAEA,IAAK,OAAhB;AAAwBI,MAAAA,KAAK,EAAEF,CAAC,CAACW,QAAF;AAA/B,KAAD,CAAT;AACA;AACD;;AAED,OAAO,UAAUC,WAAV,GAAwB;AAC9B,QAAMxB,UAAU,CAACF,cAAc,CAAC2B,kBAAhB,EAAoCrB,QAApC,CAAhB;AACA,QAAMJ,UAAU,CAACF,cAAc,CAAC4B,QAAhB,EAA0BV,OAA1B,CAAhB;AACA","sourcesContent":["import { AllTypeActions } from '../types';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { Requests } from '../requests';\nimport { AnyAction } from 'redux';\nimport { getApiUrl } from '../endpoints';\nimport { showMessage } from '../actions';\n\nfunction* getUsers() {\n\ttry {\n\t\t// const apiUrl = getApiUrl(ENDPOINTS.GET_USERS);\n\t\tconst apiUrl = 'https://60517468534609001767198c.mockapi.io/api/user';\n\t\tconsole.log('apiUrl', apiUrl);\n\t\tconst data: any = yield Requests.get(apiUrl);\n\t\tyield put({ type: AllTypeActions.LOAD_USERS_SUCCESS, data });\n\t\tconsole.log(data);\n\t} catch (e) {\n\t\tyield put({ type: AllTypeActions.LOAD_USERS_ERROR, error: e.message });\n\t}\n}\n\nfunction* addUser({ type, input }: AnyAction) {\n\tyield put({ type: `${type}_ATTEMPT` });\n\ttry {\n\t\tconst apiUrl = getApiUrl(ENDPOINTS.CREATE_ADMIN_ACCOUNT);\n\t\tconst data: any = yield Requests.post(apiUrl, input);\n\t\tif (data && data.success) {\n\t\t\tyield put({ type: `${type}_SUCCESS`, data: data.account });\n\t\t\tyield put(showMessage('Create addmin account successful!'));\n\t\t} else {\n\t\t\tyield put({ type: `${type}_FAIL`, error: data.message });\n\t\t}\n\t} catch (e) {\n\t\tyield put({ type: `${type}_FAIL`, error: e.toString() });\n\t}\n}\n\nexport function* userActions() {\n\tyield takeLatest(AllTypeActions.LOAD_USERS_LOADING, getUsers);\n\tyield takeLatest(AllTypeActions.ADD_USER, addUser);\n}\n"]},"metadata":{},"sourceType":"module"}